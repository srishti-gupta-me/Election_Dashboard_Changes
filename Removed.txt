#Slider and Sub Plots 


voter_head_container=st.container()
voterh_1,voterh_2,voterh_3=voter_head_container.columns([3.5,2,3])
voterh_2.title('Voter Turnout')


voter_container=st.container()
voter_1,voter_2,voter_3=voter_container.columns([1,3,1])
voter=ass_csv('./voterturnout.csv', nrows=100000)

fig = px.bar(voter, x="Year", y="total", animation_frame="State_Name", animation_group="Year",color="State_Name", hover_name="Assembly_No", range_x=[1960,2022], range_y=[0,100], height=600, width=1000)

fig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 2000
fig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 500


fig.update_layout(
      title={'text': "",
        'y':1,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
    xaxis_title="Assembly Number",
    yaxis_title="Turnout Percentage",
    legend_title="State Name",
    barmode='group', height=600, width=600)

voter_2.plotly_chart(fig, use_container_width=True)



fig = make_subplots(rows=1, cols=3, subplot_titles=("Voter Turnout-All", "Voter Turnout-Male", "Voter Turnout-Female"))


# All

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Goa']['Assembly_No'],
    y=voter[voter['State_Name']=='Goa']['total'],
    name='Goa',
    marker_color='purple'
),row=1, col=1)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Manipur']['Assembly_No'],
    y=voter[voter['State_Name']=='Manipur']['total'],
    name='Manipur',
    marker_color='green'
),row=1, col=1)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Punjab']['Assembly_No'],
    y=voter[voter['State_Name']=='Punjab']['total'],
    name='Punjab',
    marker_color='red'
),row=1, col=1)


fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttarakhand']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttarakhand']['total'],
    name='Uttarakhand',
    marker_color='yellow'
),row=1, col=1)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttar_Pradesh']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttar_Pradesh']['total'],
    name='Uttar Pradesh',
    marker_color='blue'
),row=1, col=1)


#Male

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Goa']['Assembly_No'],
    y=voter[voter['State_Name']=='Goa']['male'],showlegend=False,
    name='Goa',
    marker_color='purple'
),row=1, col=2)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Manipur']['Assembly_No'],
    y=voter[voter['State_Name']=='Manipur']['male'],showlegend=False,
    name='Manipur',
    marker_color='green'
),row=1, col=2)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Punjab']['Assembly_No'],
    y=voter[voter['State_Name']=='Punjab']['male'],showlegend=False,
    name='Punjab',
    marker_color='red'
),row=1, col=2)


fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttarakhand']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttarakhand']['male'],showlegend=False,
    name='Uttarakhand',
    marker_color='yellow'
),row=1, col=2)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttar_Pradesh']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttar_Pradesh']['male'],showlegend=False,
    name='Uttar Pradesh',
    marker_color='blue'
),row=1, col=2)



#Female



fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Goa']['Assembly_No'],
    y=voter[voter['State_Name']=='Goa']['female'],showlegend=False,
    name='Goa',
    marker_color='purple'
),row=1, col=3)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Manipur']['Assembly_No'],
    y=voter[voter['State_Name']=='Manipur']['female'],showlegend=False,
    name='Manipur',
    marker_color='green'
),row=1, col=3)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Punjab']['Assembly_No'],
    y=voter[voter['State_Name']=='Punjab']['female'],showlegend=False,
    name='Punjab',
    marker_color='red'
),row=1, col=3)


fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttarakhand']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttarakhand']['female'],showlegend=False,
    name='Uttarakhand',
    marker_color='yellow'
),row=1, col=3)

fig.add_trace(go.Line(
    x=voter[voter['State_Name']=='Uttar_Pradesh']['Assembly_No'],
    y=voter[voter['State_Name']=='Uttar_Pradesh']['female'], showlegend=False,
    name='Uttar Pradesh',
    marker_color='blue'
),row=1, col=3)


#Layout

fig.update_layout(
    
      title={'text': "Voter Turnout- All",
        'y':1,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'},
    legend_title="State Name",
    barmode='group', height=550, width=500)

fig.update_yaxes(title_text="Turnout Percentage",range=[0,100],row=1, col=1)
fig.update_xaxes(title_text="Assembly Number",range=[0,18], row=1, col=1)

fig.update_yaxes(title_text="Turnout Percentage",range=[0,100],row=1, col=2)
fig.update_xaxes(title_text="Assembly Number",range=[0,18], row=1, col=2)

fig.update_yaxes(title_text="Turnout Percentage",range=[0,100],row=1, col=3)
fig.update_xaxes(title_text="Assembly Number",range=[0,18], row=1, col=3)


st.plotly_chart(fig,use_container_width=True)


#Matplotlib based charts

# nota_container=st.container()
# nota_container.subheader('NOTA Percentage')
# nota_1,nota_2, nota_3=nota_container.columns([2,0.5,2.5])



# nota_2.markdown("""
# <style>
# .vl {
#   border-left: 0.1vw solid grey;
#   margin-left: 3vw;
#   height:80vh;
# }
# </style>
# <div class="vl"></div>
# """, unsafe_allow_html=True)



# read_and_cache_csv = st.cache(suppress_st_warning=True)(pd.read_csv)
# data = read_and_cache_csv('./nota.csv', nrows=100000)

# nota_1.plotly_chart(bar_chart(data.astype(str), data['State'],data['Value'],"","State","Percentage"), use_container_width=True)

# #nota_3.image('./geo.png')

# st.markdown("""<hr/>""", unsafe_allow_html=True)

# #Parties

# st.markdown("<div id='linkto_party'></div>", unsafe_allow_html=True)   
 
# party_container=st.container()
# party_container.subheader('Contesting Parties')

# party_1,party_2, party_3=party_container.columns([2,0.5,2.5])

# read_and_cache_csv = st.cache(suppress_st_warning=True)(pd.read_csv)
# data = read_and_cache_csv('./nota.csv', nrows=100000)

# party_1.plotly_chart(bar_chart(data.astype(str), data.State,data.Value,"","State","Percentage"), use_container_width=True)


# st.markdown("""<hr/>""", unsafe_allow_html=True)



# party_2.markdown("""
# <style>
# .vl {
#   border-left: 0.1vw solid grey;
#   margin-left: 3vw;
#   height:80vh;
# }
# </style>
# <div class="vl"></div>
# """, unsafe_allow_html=True)


# def map_plot(file_link, container_name, color):
#     map_df = gpd.read_file("./maps-master/States/Admin2.shp")
#     map_value= pd.read_csv(file_link)
#     merged = map_df.merge(map_value, how='left', left_on="ST_NM",right_on="State")
#     merged.drop(['State'], axis=1, inplace=True)
#     merged['Value']=merged['Value'].mask(merged['Value'].isnull()==True,-1)

#     # set the value column that will be visualised
#     variable = 'Value'
#     # set the range for the choropleth values
#     vmin, vmax = 0, 100

#     # create figure and axes for Matplotlib
#     fig, ax = plt.subplots(1, figsize=(30, 10))
#     # remove the axis
#     ax.axis('off')


#     # Create colorbar legend
#     sm = plt.cm.ScalarMappable(cmap=color, norm=plt.Normalize(vmin=vmin, vmax=vmax))
#     # empty array for the data range
#     sm.set_array([]) # or alternatively sm._A = []. Not sure why this step is necessary, but many recommends it
#     # add the colorbar to the figure
#     # fig.colorbar(sm)

#     # create map
#     merged.plot(column=variable, cmap=color, linewidth=0.8, ax=ax, edgecolor='0.8')

#     # Add Labels
#     merged['coords'] = merged['geometry'].apply(lambda x: x.representative_point().coords[:])
#     merged['coords'] = [coords[0] for coords in merged['coords']]

#     states=['Manipur','Punjab','Uttarakhand','Goa','Uttar Pradesh']

#     for idx, row in merged.iterrows():

#         if row['ST_NM'] in states:
#             plt.annotate(text=row['Value'], xy=row['coords'],horizontalalignment='center')

#     container_name.pyplot(fig)
    
# map_plot("nota.csv",nota_3,"Blues")
# map_plot("party.csv",party_3,"Oranges")










26th Feb Landing Pages 

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import math
from PIL import Image
import streamlit.components.v1 as components
import base64
import geopandas as gpd
from plotly.subplots import make_subplots
import json


#Adds favicon to the website and set page title 
favicon_image = Image.open('ashoka.jpeg')
st.set_page_config(page_title="Previous Election Insights", page_icon=favicon_image, layout="wide")

#To hide hamburger menu

hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True) 

#To reduce padding between containers in the application
padding = 0
st.markdown(f""" <style>
    .reportview-container .main .block-container{{
        padding-top: {padding}rem;
        padding-right: {padding}rem;
        padding-left: {padding}rem;
        padding-bottom: {padding}rem;
    }} </style> """, unsafe_allow_html=True)


#Landing Page 
components.html("""<html>
<style>

body {
  background-color: white;
} 

#title
{ text-align: center;
font-family: Arial;
font-size: 3vw;
padding: 0px;
margin-top:0vh;
margin-left:20vw;
position: absolute;
}

#sub-heading
{ text-align: center;
font-family: Arial;
font-size: 1.8vw;
padding: 0px;
margin-top:30vh;
margin-left:50vw;
position: absolute;
}

#logo
{
  margin-top:0vh;
  margin-left:85vw;
  margin-right:auto;
  position: absolute;
  width:5vw;
  height: auto;
}


</style>
<html>
<body>

<main>
<h1 id="title">Assembly Elections 2022<h1>
<p id="sub-heading"><i>Metrics from the past</i><p>

<img id="logo" src="https://github.com/srishti-gupta-me/Election_Dashboard/blob/main/logo.png?raw=true"/>
  
</main>
</body>
</html>
""", height=150)

landing_con=st.container()

landing_con_1, landing_con_2, landing_con_3, landing_con_4=landing_con.columns([0.5,1.5,1.5,0.5])

bg=Image.open(r'./initial_bg.png')

with landing_con_2:
    st.image(bg, use_column_width='always')  

original_title = '<p style="font-family:Arial; font-size: 1vw; margin-top: 15vh;">Click on any of the links below to see what the numbers looked like in the last round of elections for the poll bound states of Punjab, Uttarakhand, Uttar Pradesh, Manipur and Goa.</p>'

landing_con_3.markdown(original_title, unsafe_allow_html=True)


def local_css(file_name):
    with open(file_name) as f:
        st.markdown('<style>{}</style>'.format(f.read()), unsafe_allow_html=True)

local_css("style.css")


linkers=""" <style>  
  a {
   justify-content: center;
  align-items: center;
  }
  
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto;
  margin-left:0vw;
  margin-right:0vw;
  margin-top:5vh;
  position: relative;
  text-align: center;
  grid-gap: 2vh 1vw;
}

.grid-item {
  background-color: rgba(255, 255, 255, 1);
  border: 1px solid rgba(0, 0, 0, 0);
  font-size: 1vw;
   
}

.button-css {

  padding: 0px 10px;
  background-color: rgba(255, 218, 88, 1);;
  color: #000;
  height:8vh;
  width:8vw;
  border-radius: 10px;
  text-align: center;
  
}</style>

<div class="grid-container">
 <div class="grid-item"><a href=#1><button class="button-css">Voter Turnout</button></a></div>
 <div class="grid-item"><a href=#2><button class="button-css">Constituencies</button></a></div>
 <div class="grid-item"><a href=#3><button class="button-css">Women Representation</button></a></div>
 <div class="grid-item"><a href=#4><button class="button-css">Party Seat Share</button></a></div>
 <div class="grid-item"><a href=#5><button class="button-css">Seat Share Across States</button></a></div>
</div>


"""
landing_con_3.markdown(linkers, unsafe_allow_html=True)
st.markdown("""<hr/>""", unsafe_allow_html=True)




#GeoJSON
with open('./India_States.geojson') as f:
    gj = json.load(f)
    
@st.cache
def map(df,df_1,x,title_fig='', legend_show=True):
    
    fig = px.choropleth(df_1, geojson=gj, locations='ST_NM', color='Value',
                               featureidkey="properties.ST_NM",
                               color_discrete_sequence=["rgb(211,211,211)"],
                                                             
                              )
    fig.add_trace(go.Choropleth(featureidkey='properties.ST_NM',
                                  geojson=gj,
                                  locations=df['State_Name'],
                                  z=df["{}".format(x)],
                                  colorscale=[[0, 'rgb(255, 229, 180)'], [1, 'rgb(248, 131, 121)']],
                                  #colorscale='viridis',
                                  showscale=legend_show                      
                                 ))
  

    fig.update_geos(projection_type="van der grinten", fitbounds="locations", visible=False)
    fig.update_layout(autosize=False,title={'text': "{}".format(title_fig),
        'x':0.465,
        'y':0,
        'xanchor': 'center',
        'yanchor': 'bottom'},
         margin=dict(l=0, r=0, t=0, b=0, autoexpand=True),showlegend=False, height=800)
    fig.update_xaxes(mirror=True, showline=True)
    fig.update_coloraxes(cauto=False, cmin=0, cmax=100)

    return(fig)


#To create base map
df_null= pd.read_csv("./states_shapefile_name.csv",dtype={"State": str})

csv = st.cache(suppress_st_warning=True, allow_output_mutation=True)(pd.read_csv)

#Voter Turnout
st.markdown("<div id='1'></div>", unsafe_allow_html=True) 

voter_head_container=st.container()
voterh_1,voterh_2,voterh_3=voter_head_container.columns([3.5,2,3])
voterh_2.title('Voter Turnout')

voter_container=st.container()
voter_1,voter_2,voter_3=voter_container.columns([0.5,3,1])
voter=pd.read_csv('./data/voter.csv')

config = dict({'scrollZoom': False})
#voter_2.plotly_chart(map(voter,df_null,'Percentage','',True), use_container_width=True,**{'config': config})

components.html("""
<iframe title="" aria-label="Map" id="datawrapper-chart-wFZd3" src="https://datawrapper.dwcdn.net/wFZd3/2/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="729"></iframe>

""", height=750)

st.markdown("""<hr/>""", unsafe_allow_html=True)


#Constituencies percentage
st.markdown("<div id='2'></div>", unsafe_allow_html=True) 


constituencies=pd.read_csv('./data/constituencies.csv')
constituencies['Percentage']=np.nan
constituencies['Percentage']=round(constituencies['count_i']*100/ constituencies['total'], 2)

fig = px.bar(constituencies, x="State_Name", y="Percentage",
             color='Constituency_Type', barmode='group',
             height=400, hover_name="Constituency_Type", hover_data={"count_i":True, "total":True, "Constituency_Type":False,"State_Name":False}, 
             labels = {"count_i":"Count","total":"Total", "type":"", "per":"Percentage"}, 
             color_discrete_map={
             'GEN': 'lightgreen',
              'SC': 'yellow',
                 'ST':'green'}
            )

fig.update_layout(hovermode=None, plot_bgcolor="White")
fig.update_xaxes(showline=True, linewidth=1, linecolor='grey')
fig.update_yaxes(showline=True, linewidth=1, linecolor='grey')

const_head_container=st.container()
const_1,const_2,const_3=const_head_container.columns([3,3,2])
const_2.title('Constituencies')


const_bar_container=st.container()
const_bar_1,const_bar_2, const_bar_3=const_bar_container.columns([1,3,1])
const_bar_2.plotly_chart(fig,use_container_width=True)


st.markdown("""<hr/>""", unsafe_allow_html=True)


#Women Winner and Contestant

st.markdown("<div id='3'></div>", unsafe_allow_html=True) 

women_head_container=st.container()
women_1,women_2,women_3=women_head_container.columns([2.5,3,2])
women_2.title('Women Winner and Contestants')


women_container=st.container()
women_1,women_2, women_3=women_container.columns([1,3,1])

contest=pd.read_csv('./data/contestant.csv')
contest['women_contestant_per']=np.nan
contest['women_contestant_per']=round(contest['Women']*100/contest['Total'],2)
contest['women_winner_per']=np.nan
contest['women_winner_per']=round(contest['Winner']*100/contest['total'],2)
contest.rename({'Total':'total_contestant','Women':'women_contestant','Winner':'women_winner','total':'total_winner'}, axis=1, inplace=True)

c_1=contest.groupby(['State_Name','Assembly_No','total_contestant','women_contestant'])['women_contestant_per'].unique().reset_index().explode('women_contestant_per')
c_1['type']='women_contestant_per'
c_1.rename({'women_contestant_per':'per'}, axis=1, inplace=True)

c_2=contest.groupby(['State_Name','Assembly_No','women_winner','total_winner'])['women_winner_per'].unique().reset_index().explode('women_winner_per')
c_2['type']='women_winner_per'
c_2.rename({'women_winner_per':'per'}, axis=1, inplace=True)

c=c_2.append(c_1)

c['winner']=np.nan
c['winner']=c['winner'].mask( (c['women_winner'].isna()==True), c['women_contestant'])
c['winner']=c['winner'].mask( (c['women_winner'].isna()==False), c['women_winner'])
c['contestant']=np.nan
c['contestant']=c['contestant'].mask( (c['total_contestant'].isna()==True), c['total_winner'])
c['contestant']=c['contestant'].mask( (c['total_contestant'].isna()==False), c['total_contestant'])



fig = px.bar(c, x="State_Name", y="per",
             color='type', barmode='group',
             height=400, hover_name="type", hover_data={"winner":True, "contestant":True, "type":False,"State_Name":False}, 
             labels = {"winner":"women","contestant":"total", "type":"", "per":"Percentage"}, 
             color_discrete_map={
             'women_winner_per': 'lightblue',
              'women_contestant_per': 'purple'
    })

fig.update_layout(hovermode=None, plot_bgcolor="White")
fig.update_xaxes(showline=True, linewidth=1, linecolor='grey')
fig.update_yaxes(showline=True, linewidth=1, linecolor='grey')


women_2.plotly_chart(fig,use_container_width=True)

st.markdown("""<hr/>""", unsafe_allow_html=True)



#Party Seat Share
st.markdown("<div id='4'></div>", unsafe_allow_html=True) 


party_head_container=st.container()
party_1,party_2,party_3=party_head_container.columns([3,3,2])
party_2.title('Party Seat Share')

df_party=csv('./data/party_seat_share.csv')
fig= px.sunburst(df_party, path=['State_Name','Party','Party_Seat_Percentage'], 
                 values='Party_Seat',width=600, height=600, color='Party_Seat_Percentage',
                 color_continuous_scale='Tealgrn'
                )

fig.update_traces(insidetextorientation='radial')
fig.update_layout(hovermode=None)

party_seat=st.container()
party_seat_1,party_seat_2,party_seat_3=party_seat.columns([1,3,1])
party_seat_2.plotly_chart(fig,use_container_width=True)


st.markdown("""<hr/>""", unsafe_allow_html=True)



#Party Performance Across States

st.markdown("<div id='5'></div>", unsafe_allow_html=True) 

per_container=st.container()
per_1,per_2,per_3=per_container.columns([3,3,2])
per_2.title('Party Seat Share Across States')

components.html("""
""", height=10)


components.html("""
<html>
  
<head>
<script type="text/javascript">!function(){"use strict";window.addEventListener("message",(function(e){if(void 0!==e.data["datawrapper-height"]){var t=document.querySelectorAll("iframe");for(var a in e.data["datawrapper-height"])for(var r=0;r<t.length;r++){if(t[r].contentWindow===e.source)t[r].style.height=e.data["datawrapper-height"][a]+"px"}}}))}();
</script>
  
<style>
body {
  height: 800px;  
} 

.grid-container {
  display: grid;
  grid-template-columns: auto auto auto;
  margin-left:0vw;
  margin-right:0vw;
  margin-top:5vh;
  position: absolute;
  grid-gap:5vw;
  text-align: center;
}

.grid-item {
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid rgba(0, 0, 0, 0);
  font-size: 10vh;
  border-radius: 0px;
  padding: 0px;
  font-size: 30px;
  text-align: center;
}
</style>
</head>
<body>
<main>

 <div class="grid-container">
   
  <div class="grid-item"><iframe title="INC" aria-label="Map" id="datawrapper-chart-kVAmg" src="https://datawrapper.dwcdn.net/kVAmg/2/" scrolling="no" frameborder="0" style="border: none;" width="500" height="600"></iframe></div>
   
  <div class="grid-item"><iframe title="BJP" aria-label="Map" id="datawrapper-chart-XigkX" src="https://datawrapper.dwcdn.net/XigkX/2/" scrolling="no" frameborder="0" style="border: none;" width="500" height="600"></iframe></iframe></div>
      
  <div class="grid-item"><iframe title="IND" aria-label="Map" id="datawrapper-chart-lbr1c" src="https://datawrapper.dwcdn.net/lbr1c/3/" scrolling="no" frameborder="0" style="border: none;" width="500" height="600"></iframe></div>
   
</div>
</main>
</body>
</html>

""", height=800)

components.html("""
<iframe title="" aria-label="Split Bars" id="datawrapper-chart-gqCpm" src="https://datawrapper.dwcdn.net/gqCpm/1/" scrolling="no" frameborder="0" style="width: 0; min-width: 100% !important; border: none;" height="120"></iframe><script type="text/javascript">!function(){"use strict";window.addEventListener("message",(function(e){if(void 0!==e.data["datawrapper-height"]){var t=document.querySelectorAll("iframe");for(var a in e.data["datawrapper-height"])for(var r=0;r<t.length;r++){if(t[r].contentWindow===e.source)t[r].style.height=e.data["datawrapper-height"][a]+"px"}}}))}();
</script>

""", height=100)


# party_container=st.container()
# party_b1,party_b2, party_b3=party_container.columns([1,1,1])

# party_presence=csv('./data/party_presence.csv')

# party_b1.plotly_chart(map(party_presence[party_presence['Party']=='BJP'],df_null, 'Party_Seat_Percentage','BJP',False), **{'config': config}, use_container_width=True)

# party_b2.plotly_chart(map(party_presence[party_presence['Party']=='INC'],df_null,'Party_Seat_Percentage','INC', False), **{'config': config}, use_container_width=True)

# party_b3.plotly_chart(map(party_presence[party_presence['Party']=='IND'],df_null,'Party_Seat_Percentage','IND',False), **{'config': config}, use_container_width=True)


